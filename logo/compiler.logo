to handle-line :l
run-line parse :l
end

to run-line :line
if empty? :line [stop]
let [code compile-line :line]
;print :code
;stop
.send 0 wait 2
if not check [print "|no logochip| stop]
erase-sector $e
wfl $e $e000 :code
start
;clearcom make "monon true
end

to compile :file
compile-procs parse filetostring :file
end

to compile-procs :list
make "procs compile-fcns :list
;print :procs 
print se count :procs "bytes
.send 0 wait 2
if not check [print "|no logochip| stop]
erase-sector $f
wfl $f $f000 :procs
clearcom 
end

;----------------
; compiler 
;

to compile-fcns :code
dolist [i :plist-names] [erplist :i]
setup
output pass3 pass2 pass1 :code
end

to compile-line :code
let [*result* [] arglist [] locals []
      *pc* 0 name "*toplevel*
       toplevel? false]
pass2-body :code
output se pass3 :*result* 0
end

;----------------
; compiler pass1
;

to pass1 :list
let [*result* [] token " name "*toplevel*]
loop [if empty? :list [output :*result*]
          make "token pop "list
          if :token = "to  [pass1-fcn pop "list pass1-args pass1-body]
          if :token = "define  [pass1-fcn pop "list pop "list pop "list]
          if :token = "global [setup-globals pop "list]
          if :token = "constants [setup-constants pop "list]]
end

to pass1-fcn :proc :args :body
if not empty? getp :proc "type
     [error se :proc [already defined]]
add-name :proc     
add (list :proc :args :body)
put :proc "args count :args
put :proc "argnames :args
put :proc "type "ufun
ifelse mmmember? "output :body
    [put :proc "outputs? true]
    [put :proc "outputs? false]
end

to pass1-args
let [*result* []]
loop [if empty? first :list [output :*result*]
          if not equal? ": first first :list [output :*result*]
          add bf pop "list]
end

to pass1-body
let [*result* []]
loop [if empty? :list [output :*result*]
          if equal? "end first :list [ignore pop "list output :*result*]
          add pop "list]
end

to setup-globals :list
if word? :list [make "list (se intern bf :list)]
dolist [i :list]
 [add-name :i add-name .word "set :i
  add-name :i add-name .word "storein :i
  put :i "macro (se "|(| "gread :next-global "|)| )
  put .word "set :i "macro se "gwrite :next-global
  put .word "storein :i "macro se "gwrite :next-global
  put .word :i "++ "macro se "ginc :next-global
  put .word "-- :i "macro se "gdec :next-global
  make "next-global :next-global + 1]
end

to setup-constants :list
dolist [i :list]
  [if or not list? :i not (count :i) = 2
     [error se [bad constants] :list]
   add-name first :i
   put first :i "macro const-eval item 2 :i]
end

to const-eval :list
let [result []]
dolist [i (se :list)][make "result lput const-eval-one :i :result]
output run :result
end

to const-eval-one :thing
if number? :thing [output :thing]
;if (first :thing) = "# [output from-binary bf :thing]
if member? :thing [+ - * %] [output :thing]
let [val getp :thing "macro]
if not number? :val [error se [bad constant] :thing]
output :val
end


to mmmember? :a :b
if word? :b [output equal? :a :b]
dolist [i :b][if mmmember? :a :i [output true]]
output false
end


;----------------
; compiler pass2
;


to pass2 :list
let [*result* [] *pc* :proc-start]
loop [if empty? :list [output :*result*]
         pass2-fcn pop "list]
end

to pass2-fcn :fcn
let [name item 1 :fcn
        arglist item 2 :fcn
        locals []
        body item 3 :fcn
        toplevel? true]
put :name "addr :*pc*
put :name "locals 0
add-and-count se "to :name 2
pass2-body :body
add-and-count [prim stop] 1
put :name "endaddr :*pc*
end

to pass2-body :body
let [command? true]
loop [if empty? :body [stop]
         pass2-item pop "body]
end

to pass2-item :item
selectq typeof :item
    [list [command-check :item pass2-list :item stop]
      number [command-check :item  pass2-number :item stop]
      quote-symbol [command-check :item pass2-string bf :item stop]
      dot-symbol[command-check :item pass2-dsym bf :item stop]]
pass2-symbol :item
end

to pass2-number :n
if member? ". :item [pass2-item floatbits :item stop]
ifelse and :n < 256 :n > -1
   [add-and-count se "byte :n 2]
   [add-and-count se "number :n 5]
end

to pass2-symbol :item
if (first :item) = "# [pass2-number from-binary bf :item stop]
if and number? bl :item (last :item) = "f [pass2-item floatbits bl :item stop]
let [nargs getp :item "args]
if empty? :nargs [try-macro :item stop]
if  :nargs < 0 [error se [not enough inputs to] :item]
ifelse :command?
     [if getp :item "outputs? [error se [you don't say what to do with] :item]]
     [if not getp :item "outputs? [error se :item [doesn't output]]]
pass2-argloop
pass2-funcall :item
end

to pass2-string :str
make "str replace :str "\\n char 10
add-and-count se "string :str (count :str) + 4
end

to try-macro :item
let [macro getp :item "macro]
if empty? :macro [error se :item "undefined]
make "body se :macro :body
pass2-item pop "body
end

to pass2-argloop
let [toplevel? false command? false]
repeat :nargs [if empty? :body [error se [not enough inputs to] :item]
                         pass2-item pop "body infix-check]
end

to pass2-list :item
if not empty? :item 
  [if (first :item) = "## [make "item se "# break-into-bytes bf :item]
   if (first :item) = "# 
    [add-and-count list "# bf :item (count :item) + 2 
     stop]]
let [command? true]
add-and-count [|-[-| 0] 3
pass2-body :item
add-and-count [|-]-| 0] 1
end

to break-into-bytes :list
let [res []]
dolist [i :list][make "res (se :res byte0 :i byte1 :i byte2 :i byte3 :i)]
output :res
end

to pass2-dsym :item
let [offset dsym-offset :item]
if empty? :offset [error se :item [has no value]]
add-and-count se "lthing  :offset 2
end


to pass2-funcall :item
if equal? getp :item "type "ufun
  [ifelse tailcall?
    [add-and-count se "ufun-tail :item 3]
    [add-and-count se "ufun :item 3]
   stop]
if equal? getp :item "type "external
  [add-and-count se "external :item 2 stop]
if getp :item "special? [run (se word "handle- :item) stop]
add-and-count se "prim :item 1
end

to tailcall?
output (and :name = :item :toplevel? empty? :body)
end

to command-check :item
if :command? [error se [you don't say what to do  with] :item]
end

to infix-check
if not infix? [stop]
let [fcn pop "body]
pass2-item pop "body
pass2-funcall :fcn
infix-check
end

to infix?
if empty? :body [output false]
output member? first :body :infixes
end

to dsym-offset :var
if member? :var :arglist [output (count :arglist) - itempos :var :arglist]
if member? :var :locals [output logand $ff minus itempos :var :locals]
output "
end

to |handle-(|
let [nargs 1] pass2-argloop
if not (pop "body) = "|)| [error "|() error|]
end

to |handle-)|
error [misplaced )]
end

to handle-waituntil
handle-list-that-outputs
add-and-count [prim waituntil] 1
end

to handle-list-that-outputs
add-and-count [|-[-| 0] 3
let [nargs 1 
     newbody (se pop "body)
     body :newbody]
pass2-argloop
add-and-count [|-]-r| 0] 1
end

to handle-let
if :name = "*toplevel* [error [let can only be used in a procedure]]
let [newbody pop "body
     body :newbody]
if not list? :body [error [let needs a list as input]]
loop [if empty? :body [stop]
         make "locals se :locals first :body
         put :name "locals 1 + getp :name "locals
         handle-make]
end

to handle-make
let [var sym pop "body 
       offset dsym-offset :var]
if empty? :offset [error se :var [isn't a local]]
let [nargs 1] pass2-argloop 
add-and-count se "lmake :offset 2
end

to sym :name
if member? first :name [" :][output bf :name]
output :name
end

;----------------
; compiler pass3
;

to pass3 :list
let [lists []
      *result* []]
repeat 99999
      [if empty? :list [output :*result*]
       pass3-item pop "list]
end


to pass3-item :item
let [x item 3 :item]
selectq item 2 :item
    [to           [add getp :x "args add getp :x "locals]
      byte        [add 1 add byte0 :x]
      number      [add 2 add byte0 :x add byte1 :x
                   add byte2 :x add byte3 :x]
      |-[-|       [add 3
                   make "lists  fput count :*result* :lists 
                   add 0 add 0]
      string      [add 3 add byte0 1 + count :x
                   add byte1 1 + count :x
                   dotimes [i count :x][add ascii item :i + 1 :x]
                   add 0]
      #           [add 3 add byte0 count :x add byte1 count :x
                   dolist [i :x][add :i]]
      |-]-|       [add-eol 4]
      |-]-r|      [add-eol 5]
      lthing      [add 6 add :x]
      lmake       [add 7 add :x]
      ufun        [add 8
                   add byte0 (getp :x "addr)
                   add byte1 (getp :x "addr)]
;       ufun-tail [add 9 
;                  add byte0 (getp :x "addr)
;                  add byte1 (getp :x "addr)]
      external    [ifelse get :x "outputs? [add 11 add ext# :x][add 10 add ext# :x]]
      prim        [add prim# :x]]
end

to add-eol :n
add :n
let [offset pop "lists
     len (count :*result*) - :offset - 2]
setnth :offset :*result* byte0 :len
setnth :offset + 1 :*result* byte1 :len
end

to prim# :x
output  (itempos :x :prims) + 11
end

to ext# :x
output  (itempos :x :externals) - 1
end


;----------------
; compiler setup
;


to setup-prims :list
let [name " args 0]
loop 
 [if empty? :list [stop]
  make "name first :list 
  make "args item 3 :list
  make "prims se :prims :name
  if :args < 0 [make "infixes se :name :infixes]
  put :name "type "prim
  put :name "args :args
  put :name "special? false
  put :name "outputs? equal? "r item 2 :list
  make "list bf bf bf :list]  
end

to setup-externals :list
let [name " args 0]
loop 
 [if empty? :list [stop]
  make "name first :list 
  make "args item 3 :list
  make "externals se :externals :name
  if :args < 0 [make "infixes se :name :infixes]
  put :name "type "external
  put :name "args :args
  put :name "outputs? equal? "r item 2 :list
  make "list bf bf bf :list]  
end


to setup-specials :list
dolist [name :list]
    [put :name "type "prim
      put :name "args 0
      put :name "special? true]
end


;----------------
; utilities
;

to pop :plist
let [first first thing :plist]
make :plist bf thing :plist
output :first
end

to add-and-count :item :len
add se :*pc* :item
make "*pc* sum :*pc* :len
end

to add :item
make "*result* lput :item :*result*
end

to add-name :item
make "plist-names lput :item :plist-names
end

to error :thing
if not :name = "*toplevel* [make "thing (se :thing "in :name)]
print :thing
stopme
end

to from-binary  :n
if empty? :n [output 0]
output (remainder :n 2) + 2 * from-binary bl :n
end

to typeof :item
if list? :item [output "list]
if number? :item [output "number]
if (first :item) = ": [output "dot-symbol]
if (first :item) = "" [output "quote-symbol]
output "symbol
end


;---------------
; utilities
;

to ticktask
make "ticks :ticks + 1
;if not :monon [stop]
let [c 0 res "]
loop
 [make "c .recc
  if :c = -1 [stop]
  if :c = $ff [stop]
  ifelse :c = 10 
    [print :monstr make "monstr "]
    [make "monstr word :monstr char :c]]
end


;----------------
; setup
;

to setup
if name? "prims [dolist [i :prims][erplist :i]]
make "plist-names []
make "prims [] make "infixes []
make "externals []
make "next-global 0
make "g $2007C000
make "proc-start $1000
let [primdefs [] extdefs []]
run parse filetostring "logo/prims.logo
setup-prims :primdefs
setup-externals :extdefs
setup-specials [( ) waituntil make let]
put "|(| "outputs? true put "|)| "outputs? true
put "make "outputs? false put "let "outputs? false
setup-globals [n m]
end

to compiler-startup
setup
make "monon false make "monstr "
make "ticks 0
startticker 50
end

